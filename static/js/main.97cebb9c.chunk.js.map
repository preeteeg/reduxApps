{"version":3,"sources":["store/actions.js","components/Counter.js","components/Modal.js","components/Users.js","components/CrudForm.js","components/ToDos.js","reducers/countReducer.js","reducers/modalReducer.js","reducers/usersReducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["openModal","isOpen","name","text","type","payload","connect","countState","count","dispatch","ownProps","console","log","increase","decrease","reset","props","className","onClick","modalState","closeModal","Fragment","usersState","loading","users","getUsers","a","fetch","response","json","data","useEffect","map","item","key","id","alt","src","CrudForm","ToDos","initialState","middleware","thunk","store","createStore","combineReducers","state","action","composeWithDevTools","applyMiddleware","getState","App","to","exact","path","status","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97cebb9c.chunk.js","sourcesContent":["\nexport const DECREASE = \"DECREASE\"\nexport const INCREASE = \"INCREASE\"\nexport const RESET = \"RESET\"\n\n//modal Actions\nexport const MODAL_OPEN =\"MODAL_OPEN\"\nexport const MODAL_CLOSE =\"MODAL_CLOSE\"\n\n\n\n//product Actions\nexport const SET_LOADING=\"SET_LOADING\"\nexport const GET__USERS= \"GET__USERS\"\n\n\n//action creators\nexport const decrease = () => ({ type: DECREASE })\nexport const increase = () =>({type:INCREASE})\nexport const reset = () => ({ type: RESET })\nexport const openModal = (isOpen,name, text) => (\n    {\n        type: MODAL_OPEN,\n        payload: {\n            isOpen,\n            name,\n            text\n        }\n    }\n)\n\nexport const closeModal = (isOpen,name, text) => (\n    {\n        type: MODAL_CLOSE,\n         payload: {\n            isOpen,\n            name,\n            text\n        }\n    }\n)\n\n\nexport const setLoading = () => ({ type: SET_LOADING })\n\n\nexport const getUsers = () => async (dispatch) =>\n{\n    dispatch(setLoading())\n    const url='https://jsonplaceholder.typicode.com/users'\n    const response = await fetch(url)  \n    const data = await response.json()\n    dispatch({ type:GET__USERS, payload:data})\n}\n\n// export const getUsers = () => {\n//   return async function(dispatch) {\n//       dispatch(setLoading());\n//       const url =\"https://jsonplaceholder.typicode.com/users\"\n//     const response = await fetch(url);\n//     const data = await response.json();\n//     dispatch({ type: GET__USERS, payload: data });\n//   };\n// };","import React,{useState} from 'react'\nimport {connect} from  'react-redux'\nimport { increase, decrease,reset,openModal } from '../store/actions'\nconst Counter = (props) =>\n{\n   \n \n    //use Hook :useState\n    //const [counter, setCounter] = useState(0)\n\n    // const count = (props.state.count)\n    // const count = props.count\n    //const{count,name,dispatch} =props\n    const { count, name, increase, decrease, reset ,openModal} = props\n\n    return (\n        <section className=\"section\">\n            <h2 className=\"section-title\">{name}</h2>\n       \n            <p className=\"counter\">{count}</p> \n            <div className=\"buttons\">\n                <button type=\"button\" className=\"btn\" onClick={increase}>Increment</button>\n                <button type=\"button\" className=\"btn\" onClick={reset}>Reset</button>\n                <button type=\"button\" className=\"btn\" onClick={decrease}>Decrement</button>\n            </div>\n             </section>\n    )\n}\n\n\nfunction mapStateToProps({countState:{count,name}})\n{\n    return { count:count,name:name}\n}\n\nfunction mapDispatchToProps(dispatch, ownProps)\n{\n    console.log(ownProps)\n    return {\n        increase: () => dispatch(increase()),\n        decrease: () => dispatch(decrease()),\n        reset: () =>\n        {\n            dispatch(reset());\n            dispatch(openModal(true,\"Am a modal\", \"Counter has been reset\"))\n        } ,\n      \n       \n      \n        \n    }\n}\n\n//HHO where it get component \nexport default connect(mapStateToProps,mapDispatchToProps)(Counter)","import React from 'react'\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { closeModal,openModal } from '../store/actions'\nimport { MdClose } from 'react-icons/md';\nconst Modal = ({ isOpen, name, text,openModal ,closeModal}) =>\n{\n\n   \n    return (\n          <React.Fragment>\n          <section className=\"section\">\n                <h2 className=\"section-title\">{name}</h2>\n                <button type=\"button\" className=\"btn\" onClick={openModal}>Open</button>\n          </section>\n        <div className={`modal-overlay ${isOpen ? `isModalOpen`:null}`}>\n            <div className='modal-container'>\n                <h4>{name}</h4>\n                <p>{text}</p>\n                <button className=\"btn btn-close\" onClick={closeModal}><MdClose /></button>\n            </div>\n            </div>\n            </React.Fragment>\n    )\n}\n\nModal.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired,\n    closeModal:PropTypes.func.isRequired,\n}\n\nfunction mapStateToProps({ modalState: { isOpen,name, text } })\n{\n    return {\n        isOpen: isOpen,\n        name:name,\n        text:text\n    }\n}\n\nfunction mapDispatchToProps(dispatch, ownProps)\n{\n    return {\n        closeModal: () => dispatch(closeModal(false, \"\", \"\")),\n        openModal: () => dispatch(openModal(true,\"Am a modal\",\"Set your text here\"))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal)\n","import React,{useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport { getUsers } from '../store/actions'\n\n\nfunction Users({loading,users,getUsers}) {\nuseEffect(() => {\n    getUsers();\n  }, [getUsers]);\n  if (loading) {\n    return <h2 className=\"section-title\">Loading...</h2>;\n  }\n  return (\n    <section className=\"section\">\n      <h2 className=\"section-title\">Crazy Users</h2>\n      <ul className=\"products\">\n        {users.map(item => {\n          return (\n            <li key={item.id} className=\"product\">\n             <img alt=\"monster\"  src={`https://robohash.org/${item.id}?set=set2/size=130x130`} />\n              <h4>{item.name}</h4>\n            </li>\n          );\n        })}\n      </ul>\n      </section>\n  )\n}\n\nUsers.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    users: PropTypes.array.isRequired,\n    getUsers:PropTypes.func.isRequired,\n    \n}\n\nconst mapStateToProps = ({ usersState:{ loading, users }})=> {\n    return{\n        loading,\n        users\n    }\n}\nconst mapDispatchToProps = (dispatch) => ({getUsers : ()=>dispatch(getUsers()) })\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Users)\n\n","import React from 'react'\n\nconst CrudForm = () =>\n{\n    return (\n            <div></div>\n    )\n}\nexport default CrudForm \n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst ToDos = () => {\n    return (\n        <div>\n            \n        </div>\n    );\n};\n\n\nToDos.propTypes = {\n    \n};\n\n\nexport default ToDos;\n","\nimport {INCREASE,DECREASE,RESET} from '../store/actions'\n\n\nconst initialState = {\n    count: 10,\n    name:'Counter'\n}\n\n\n// a reducer is responsible to update the state and expect the action\nexport default function countReducer(state = initialState, action)\n{\n    switch (action.type)\n    {\n        case DECREASE:\n            return { ...state, count: state.count - 1 }\n        case RESET:\n            return { ...state, count: 0 }\n        case INCREASE:\n            return { ...state, count: state.count + 1 }\n\n        default:\n            return state\n    }\n\n\n}\n","import { MODAL_OPEN, MODAL_CLOSE } from '../store/actions'\n\n\nconst initialState = {\n    isOpen: false,\n    name:\"\",\n    text:\"\"\n}\n\nexport default function modalReducer(state = initialState, action)\n{\n    switch (action.type)\n    {\n        case MODAL_CLOSE:\n            return {\n                ...state,\n                isOpen: action.payload.isOpen,\n                name: action.payload.name,\n                text:action.payload.text\n            }\n        \n        case MODAL_OPEN:\n            return {\n                ...state,\n                isOpen: action.payload.isOpen,\n                name: action.payload.name,\n                text:action.payload.text\n            }\n        \n        default:\n            return state\n    }\n}","import { SET_LOADING, GET__USERS } from \"../store/actions\"\n\nconst initialState = {\n    users: [],\n    loading:false\n}\n\nexport default function usersReducer(state = initialState, action)\n{\n    switch (action.type)\n    {\n        case SET_LOADING:\n            return { ...state, loading: true }\n        \n        case GET__USERS:\n            return {\n                ...state,\n                users: action.payload,\n                loading:false,\n             }\n        \n        default:\n            return state\n    }\n}","\n\nimport { createStore,applyMiddleware,combineReducers } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport countReducer from '../reducers/countReducer'\nimport modalReducer from '../reducers/modalReducer'\nimport usersReducer from '../reducers/usersReducer'\n//redux thunk\nimport thunk from 'redux-thunk'\n\nconst middleware=[thunk]\n\n//createStore will look for reducer function to update the state\nconst store = createStore(\n    combineReducers({\n        countState: countReducer,\n        modalState: modalReducer,\n        usersState:usersReducer\n    }),\n     composeWithDevTools(applyMiddleware(...middleware))\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n//dispatch\n\nconsole.log(store.getState())\nexport default store","import React from 'react';\nimport Counter from './components/Counter'\nimport Modal from './components/Modal'\nimport Users from './components/Users'\nimport Weather from './components/Users'\nimport CrudForm from './components/CrudForm';\nimport Pagination from './components/CrudForm';\nimport ToDos from './components/ToDos';\nimport store from './store/store'\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport { MdList, MdViewDay, MdViewQuilt } from 'react-icons/md';\n\nimport\n{\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nfunction App()\n{\n  return (\n\n    <Provider store={store}>\n      <Router>\n        <div className=\"cardwrapper\">\n          {/*   <Link to=\"/crudform\">\n            <div className=\"items\">\n              <div className=\"icon-wrapper\">\n                <MdList />\n              </div>\n              <div className=\"project-name\">\n                <p>Crud form App</p>\n              </div>\n            </div>\n          </Link>\n        <Link to=\"/pagination\">\n            <div className=\"items\">\n              <div className=\"icon-wrapper\">\n                <MdList />\n              </div>\n              <div className=\"project-name\">\n                <p>Pagination</p>\n              </div>\n            </div>\n          </Link>\n        */}\n          <Link to=\"/users\">\n            <div className=\"items\">\n              <div className=\"icon-wrapper\">\n                <MdList />\n              </div>\n              <div className=\"project-name\">\n                <p>Monster List</p>\n              </div>\n            </div>\n          </Link>\n          {/* <Link to=\"/todoapp\">\n            <div className=\"items\">\n              <div className=\"icon-wrapper\">\n                <MdList />\n              </div>\n              <div className=\"project-name\">\n                <p>ToDos App</p>\n              </div>\n            </div>\n     \n          </Link>\n      */}\n          <Link to=\"/counter\">\n            <div className=\"items\">\n              <div className=\"icon-wrapper\">\n                <MdViewQuilt />\n              </div>\n              <div className=\"project-name\">\n                <p>Counter App</p>\n              </div>\n            </div>\n          </Link>\n        {/*  <Link to=\"/modal\">\n            <div className=\"items\">\n              <div className=\"icon-wrapper\">\n                <MdViewDay className=\"icon-wrapper\" />\n              </div>\n              <div className=\"project-name\">\n                <p>Weather App</p>\n              </div>\n            </div>\n    </Link> */}\n          <Link to=\"/modal\">\n            <div className=\"items\">\n              <div className=\"icon-wrapper\">\n                <MdViewDay className=\"icon-wrapper\" />\n              </div>\n              <div className=\"project-name\">\n                <p>Modal popup</p>\n              </div>\n            </div>\n          </Link>\n\n\n        </div>\n        <Switch>\n          <Route exact path=\"/users\">\n            <Users />\n          </Route>\n          <Route exact path=\"/crudform\">\n            <CrudForm />\n          </Route>\n          <Route exact path=\"/todoapp\">\n            <ToDos />\n          </Route>\n          <Route path=\"/pagination\">\n            <Pagination />\n          </Route>\n          <Route path=\"/counter\">\n            <Counter status=\"\" />\n          </Route>\n          <Route path=\"/weather\">\n            <Weather />\n          </Route>\n          <Route path=\"/modal\">\n            <Modal />\n          </Route>\n        </Switch>\n\n\n      </Router>\n\n\n    </Provider>\n\n\n\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}